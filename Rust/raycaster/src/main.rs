//extern crate sdl2;

#[derive(Debug)]
struct Vector2D {
    x: f64,
    y: f64
}

#[derive(Debug)]
struct Player {
    position: Vector2D,
    direction: Vector2D,
    up: bool,
    down: bool,
    left: bool,
    right: bool,
    moveSpeed: f64,
    rotSpeed: f64
}

const SCREEN_HEIGHT = 600 
const SCREEN_WIDTH = 800

const worldMap = vec![
    vec![ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 ],
    vec![ 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,0,0,0,0,0,2,2,0,2,2,0,0,0,0,3,0,3,0,3,0,0,0,1 ],
    vec![ 1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,1 ],
    vec![ 1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,0,0,0,0,0,2,2,0,2,2,0,0,0,0,3,0,3,0,3,0,0,0,1 ],
    vec![ 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,4,0,0,0,0,5,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,4,0,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 ],
    vec![ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}
];

fn main() {
    let direction = Vector2D {
        x: -1.0f64,
        y: 0.0f64
    };

    let position = Vector2D {
        x: 21.0f64,
        y: 11.0f64,
    }
    
    let plane = Vector2D {
        x: 0.0f64,
        y: 0.66f64,
    }

    let player = Player {
        direction,
        position,
        plane,
        moveSpeed: 0.02f64,
        rotSpeed: 0.04f64
    }

    let mut running = true;

    while (running) {
        let now = SDL_GetTicks();
        let delta_time = now - last;
        let last = now;
        running = handle_input(player, deltaTime);
    }
}

fn handle_input(player: &player, delta_time: u64) -> bool {
    
}
